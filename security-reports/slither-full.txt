'npx hardhat clean' running (wd: C:\Users\JInfi\hoodcoin-contracts)
'npx hardhat clean --global' running (wd: C:\Users\JInfi\hoodcoin-contracts)
Problem deserializing hardhat configuration, using defaults: Expecting value: line 1 column 1 (char 0)
'npx hardhat compile --force' running (wd: C:\Users\JInfi\hoodcoin-contracts)

HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815) sends eth to arbitrary user
	Dangerous calls:
	- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
	- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#205)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation

Reentrancy in HoodCoinManager.createHoodToken(uint256) (contracts/HoodCoinManager.sol#211-305):
	External calls:
	- success = _safeTransferETH(treasury,CREATION_FEE) (contracts/HoodCoinManager.sol#282)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _mintTokens(tokenAddress,initialPurchaseAmount,type()(uint256).max,msg.sender) (contracts/HoodCoinManager.sol#287-292)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
		- tokenContract.mint(receiver,tokensToMint) (contracts/HoodCoinManager.sol#407)
	External calls sending eth:
	- success = _safeTransferETH(treasury,CREATION_FEE) (contracts/HoodCoinManager.sol#282)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _mintTokens(tokenAddress,initialPurchaseAmount,type()(uint256).max,msg.sender) (contracts/HoodCoinManager.sol#287-292)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	State variables written after the call(s):
	- _mintTokens(tokenAddress,initialPurchaseAmount,type()(uint256).max,msg.sender) (contracts/HoodCoinManager.sol#287-292)
		- info.reserveBalance += ethCost - royalty (contracts/HoodCoinManager.sol#392)
		- info.readyForMigration = true (contracts/HoodCoinManager.sol#402)
	HoodCoinManager.tokenInfo (contracts/HoodCoinManager.sol#55) can be used in cross function reentrancies:
	- HoodCoinManager._getStepsArray(address) (contracts/HoodCoinManager.sol#307-318)
	- HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815)
	- HoodCoinManager.calculateTokensForEth(address,uint256) (contracts/HoodCoinManager.sol#488-547)
	- HoodCoinManager.getCurrentTokenPrice(address) (contracts/HoodCoinManager.sol#817-827)
	- HoodCoinManager.getMigrationProgress(address) (contracts/HoodCoinManager.sol#897-940)
	- HoodCoinManager.getTokensReadyForMigration() (contracts/HoodCoinManager.sol#695-731)
	- HoodCoinManager.migrateReadyToken(address,uint256) (contracts/HoodCoinManager.sol#657-692)
	- HoodCoinManager.tokenInfo (contracts/HoodCoinManager.sol#55)
	- HoodCoinManager.triggerMigration(address) (contracts/HoodCoinManager.sol#835-840)
Reentrancy in HoodCoinManager.migrateReadyToken(address,uint256) (contracts/HoodCoinManager.sol#657-692):
	External calls:
	- sent = _safeTransferETH(migrator,gasFeeAmount) (contracts/HoodCoinManager.sol#686)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
		- tokenContract.mint(address(this),tokensForLiquidity) (contracts/HoodCoinManager.sol#767)
		- tokenContract.approve(UNISWAP_ROUTER,tokensForLiquidity) (contracts/HoodCoinManager.sol#768)
		- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
		- tokenContract.mint(creatorAddress,creatorTokens) (contracts/HoodCoinManager.sol#798)
		- tokenContract.mint(treasury,treasuryTokens) (contracts/HoodCoinManager.sol#799)
		- (sentCreator,None) = creatorAddress.call{value: creatorEth}() (contracts/HoodCoinManager.sol#809)
		- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
	External calls sending eth:
	- sent = _safeTransferETH(migrator,gasFeeAmount) (contracts/HoodCoinManager.sol#686)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
		- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
		- (sentCreator,None) = creatorAddress.call{value: creatorEth}() (contracts/HoodCoinManager.sol#809)
		- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
	State variables written after the call(s):
	- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
		- info.migrated = true (contracts/HoodCoinManager.sol#761)
		- info.reserveBalance = 0 (contracts/HoodCoinManager.sol#762)
	HoodCoinManager.tokenInfo (contracts/HoodCoinManager.sol#55) can be used in cross function reentrancies:
	- HoodCoinManager._getStepsArray(address) (contracts/HoodCoinManager.sol#307-318)
	- HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815)
	- HoodCoinManager.calculateTokensForEth(address,uint256) (contracts/HoodCoinManager.sol#488-547)
	- HoodCoinManager.getCurrentTokenPrice(address) (contracts/HoodCoinManager.sol#817-827)
	- HoodCoinManager.getMigrationProgress(address) (contracts/HoodCoinManager.sol#897-940)
	- HoodCoinManager.getTokensReadyForMigration() (contracts/HoodCoinManager.sol#695-731)
	- HoodCoinManager.migrateReadyToken(address,uint256) (contracts/HoodCoinManager.sol#657-692)
	- HoodCoinManager.tokenInfo (contracts/HoodCoinManager.sol#55)
	- HoodCoinManager.triggerMigration(address) (contracts/HoodCoinManager.sol#835-840)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

ERC20Initializable._name (contracts/lib/ERC20Initializable.sol#21) is never initialized. It is used in:
	- ERC20Initializable.name() (contracts/lib/ERC20Initializable.sol#33-35)
ERC20Initializable._symbol (contracts/lib/ERC20Initializable.sol#22) is never initialized. It is used in:
	- ERC20Initializable.symbol() (contracts/lib/ERC20Initializable.sol#41-43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#205)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#209)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#210)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#211)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#212)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#213)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#214)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#193)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#220)
Math.invMod(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#243-289) performs a multiplication on the result of a division:
	- quotient = gcd / remainder (node_modules/@openzeppelin/contracts/utils/math/Math.sol#265)
	- (gcd,remainder) = (remainder,gcd - remainder * quotient) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#267-274)
HoodCoinManager.calculateTokensForEth(address,uint256) (contracts/HoodCoinManager.sol#488-547) performs a multiplication on the result of a division:
	- ethWithoutRoyalty = (ethAmount * 10000) / (10000 + MINT_ROYALTY) (contracts/HoodCoinManager.sol#502-503)
	- reserveLeft = ethWithoutRoyalty (contracts/HoodCoinManager.sol#510)
	- tokensAtStep = (reserveLeft * multiFactor) / step.price (contracts/HoodCoinManager.sol#540)
HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815) performs a multiplication on the result of a division:
	- tokensForLiquidity = (ethForLiquidity * 1e18) / currentPrice (contracts/HoodCoinManager.sol#750)
	- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

HoodCoinManager.isUserVerifiedForHood(address,string) (contracts/HoodCoinManager.sol#850-858) uses a dangerous strict equality:
	- keccak256(bytes)(abi.encodePacked(location.neighborhood)) == keccak256(bytes)(abi.encodePacked(neighborhood)) (contracts/HoodCoinManager.sol#855-857)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Contract locking ether found:
	Contract MockUniswapRouter (contracts/mock/MockUniswapRouter.sol#7-36) has payable functions:
	 - MockUniswapRouter.addLiquidityETH(address,uint256,uint256,uint256,address,uint256) (contracts/mock/MockUniswapRouter.sol#16-26)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815) ignores return value by tokenContract.approve(UNISWAP_ROUTER,tokensForLiquidity) (contracts/HoodCoinManager.sol#768)
HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815) ignores return value by (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

HoodCoinToken.constructor(string,string,address).name (contracts/HoodCoinToken.sol#11) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#53-55) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)
HoodCoinToken.constructor(string,string,address).symbol (contracts/HoodCoinToken.sol#12) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#61-63) (function)
	- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#20) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in HoodCoinManager._safeTransferETH(address,uint256) (contracts/HoodCoinManager.sol#455-469):
	External calls:
	- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	Event emitted after the call(s):
	- DebugTransfer(Transfer Result,to,amount,success) (contracts/HoodCoinManager.sol#467)
Reentrancy in HoodCoinManager.migrateReadyToken(address,uint256) (contracts/HoodCoinManager.sol#657-692):
	External calls:
	- sent = _safeTransferETH(migrator,gasFeeAmount) (contracts/HoodCoinManager.sol#686)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
		- tokenContract.mint(address(this),tokensForLiquidity) (contracts/HoodCoinManager.sol#767)
		- tokenContract.approve(UNISWAP_ROUTER,tokensForLiquidity) (contracts/HoodCoinManager.sol#768)
		- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
		- tokenContract.mint(creatorAddress,creatorTokens) (contracts/HoodCoinManager.sol#798)
		- tokenContract.mint(treasury,treasuryTokens) (contracts/HoodCoinManager.sol#799)
		- (sentCreator,None) = creatorAddress.call{value: creatorEth}() (contracts/HoodCoinManager.sol#809)
		- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
	External calls sending eth:
	- sent = _safeTransferETH(migrator,gasFeeAmount) (contracts/HoodCoinManager.sol#686)
		- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
	- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
		- (tokenAmount,ethAmount,None) = router.addLiquidityETH{value: ethForLiquidity}(token,tokensForLiquidity,(tokensForLiquidity * 95) / 100,(ethForLiquidity * 95) / 100,address(0),block.timestamp + 600) (contracts/HoodCoinManager.sol#772-781)
		- (sentCreator,None) = creatorAddress.call{value: creatorEth}() (contracts/HoodCoinManager.sol#809)
		- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
	Event emitted after the call(s):
	- TokenMigrated(token,0,0) (contracts/HoodCoinManager.sol#764)
		- _migrateToUniswap(token) (contracts/HoodCoinManager.sol#691)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

HoodCoinManager._safeTransferETH(address,uint256) (contracts/HoodCoinManager.sol#455-469) tries to limit the gas of an external call that controls implicit decoding
	(success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#return-bomb

HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815) uses timestamp for comparisons
	Dangerous comparisons:
	- remainingReservedTokens > 0 (contracts/HoodCoinManager.sol#790)
	- remainingEth > 0 (contracts/HoodCoinManager.sol#804)
	- require(bool,string)(sentCreator,Creator ETH transfer failed) (contracts/HoodCoinManager.sol#810)
	- require(bool,string)(sentTreasury,Treasury ETH transfer failed) (contracts/HoodCoinManager.sol#813)
HoodCoinManager.isUserVerifiedForHood(address,string) (contracts/HoodCoinManager.sol#850-858) uses timestamp for comparisons
	Dangerous comparisons:
	- keccak256(bytes)(abi.encodePacked(location.neighborhood)) == keccak256(bytes)(abi.encodePacked(neighborhood)) (contracts/HoodCoinManager.sol#855-857)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Panic.panic(uint256) (node_modules/@openzeppelin/contracts/utils/Panic.sol#50-56) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Panic.sol#51-55)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#144-223) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#151-154)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#175-182)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#188-197)
Math.tryModExp(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#337-361) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#339-360)
Math.tryModExp(bytes,bytes,bytes) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#377-399) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#389-398)
SafeCast.toUint(bool) (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1157-1161) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#1158-1160)
HoodCoinManager._getRevertMsg(bytes) (contracts/HoodCoinManager.sol#472-483) uses assembly
	- INLINE ASM (contracts/HoodCoinManager.sol#478-481)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

2 different versions of Solidity are used:
	- Version constraint ^0.8.20 is used by:
		-^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)
		-^0.8.20 (contracts/HoodCoinBondingMath.sol#2)
		-^0.8.20 (contracts/HoodCoinManager.sol#2)
		-^0.8.20 (contracts/HoodCoinToken.sol#2)
		-^0.8.20 (contracts/interfaces/IUniswapV2Interfaces.sol#2)
		-^0.8.20 (contracts/mock/MockPriceFeed.sol#2)
		-^0.8.20 (contracts/mock/MockUniswapRouter.sol#3)
	- Version constraint =0.8.20 is used by:
		-=0.8.20 (contracts/lib/ERC20Initializable.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

ERC20Initializable._burn(address,uint256) (contracts/lib/ERC20Initializable.sol#216-221) is never used and should be removed
ERC20Initializable._mint(address,uint256) (contracts/lib/ERC20Initializable.sol#201-206) is never used and should be removed
HoodCoinManager._checkAndMigrate(address) (contracts/HoodCoinManager.sol#643-655) is never used and should be removed
HoodCoinManager._getRevertMsg(bytes) (contracts/HoodCoinManager.sol#472-483) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Panic.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#5)
	- ^0.8.20 (contracts/HoodCoinBondingMath.sol#2)
	- ^0.8.20 (contracts/HoodCoinManager.sol#2)
	- ^0.8.20 (contracts/HoodCoinToken.sol#2)
	- ^0.8.20 (contracts/interfaces/IUniswapV2Interfaces.sol#2)
	- ^0.8.20 (contracts/mock/MockPriceFeed.sol#2)
	- ^0.8.20 (contracts/mock/MockUniswapRouter.sol#3)
Version constraint =0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- =0.8.20 (contracts/lib/ERC20Initializable.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in HoodCoinManager._safeTransferETH(address,uint256) (contracts/HoodCoinManager.sol#455-469):
	- (success,None) = to.call{gas: 2300,value: amount}() (contracts/HoodCoinManager.sol#465)
Low level call in HoodCoinManager._migrateToUniswap(address) (contracts/HoodCoinManager.sol#733-815):
	- (sentCreator,None) = creatorAddress.call{value: creatorEth}() (contracts/HoodCoinManager.sol#809)
	- (sentTreasury,None) = treasury.call{value: treasuryEth}() (contracts/HoodCoinManager.sol#812)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

MockUniswapRouter (contracts/mock/MockUniswapRouter.sol#7-36) should inherit from IUniswapV2Factory (contracts/interfaces/IUniswapV2Interfaces.sol#4-7)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Parameter HoodCoinManager.setCreationFee(uint256)._newFee (contracts/HoodCoinManager.sol#147) is not in mixedCase
Parameter HoodCoinManager.setMigrationThreshold(uint256)._newThreshold (contracts/HoodCoinManager.sol#158) is not in mixedCase
Parameter HoodCoinManager.setMigrator(address)._migrator (contracts/HoodCoinManager.sol#170) is not in mixedCase
Variable HoodCoinManager.CREATION_FEE (contracts/HoodCoinManager.sol#14) is not in mixedCase
Variable HoodCoinManager.MIGRATION_THRESHOLD (contracts/HoodCoinManager.sol#15) is not in mixedCase
Variable HoodCoinManager.UNISWAP_ROUTER (contracts/HoodCoinManager.sol#20) is not in mixedCase
Function IUniswapV2Router02.WETH() (contracts/interfaces/IUniswapV2Interfaces.sol#11) is not in mixedCase
Parameter MockPriceFeed.setLatestPrice(int256)._price (contracts/mock/MockPriceFeed.sol#12) is not in mixedCase
Variable MockUniswapRouter.WETH (contracts/mock/MockUniswapRouter.sol#9) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

MockPriceFeed.constructor() (contracts/mock/MockPriceFeed.sol#8-10) uses literals with too many digits:
	- price = 200000000000 (contracts/mock/MockPriceFeed.sol#9)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < allTokens.length (contracts/HoodCoinManager.sol#702) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

ERC20Initializable._name (contracts/lib/ERC20Initializable.sol#21) should be constant 
ERC20Initializable._symbol (contracts/lib/ERC20Initializable.sol#22) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

HoodCoinManager.treasury (contracts/HoodCoinManager.sol#24) should be immutable 
MockUniswapRouter.WETH (contracts/mock/MockUniswapRouter.sol#9) should be immutable 
MockUniswapRouter.factory (contracts/mock/MockUniswapRouter.sol#8) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
. analyzed (20 contracts with 100 detectors), 60 result(s) found
